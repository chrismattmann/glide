package glide.util;

import org.xml.sax.*;
import uk.co.wilson.xml.MinML;

import java.util.Vector;
//import java.util.List;

import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.FileNotFoundException;

import glide.structs.Profile;
import glide.structs.ResourceAttributes;
import glide.structs.ProfileAttributes;
import glide.structs.ProfileElement;


/**
 * <p>A utility class for GLIDE which allows it to interoperate with its heavyweight data grid counterpart,  OODT,  
 * through serializing and de-serializing XML Resource {@link Profile}s. This class is the de-serialization end of the equation, taking in a String XML
 * representation of a Resource Profile, and then turning it into a {@link Profile} java object for use in GLIDE using the MinML lightweight SAX-compliant parser.</p>
 * 
 * 
 * 
 * @author USC Software Architecture Research Group and JPL OODT Research Group
 * @version 1.0
 * 
 */


public class XMLProfileReader extends MinML{
	
	 protected ByteArrayInputStream inputProfileStream=null;
	 protected Profile theProfile=null;
	 protected Vector theProfiles=null;
	 protected ProfileAttributes theProfileAttributes=null;
	 protected ResourceAttributes theResourceAttributes=null;
	 protected ProfileElement profElem=null;
	 protected Vector profileElements = null;
	 
	 private boolean readingProfileElement=false,readingProfileElementTitle=false,
	 readingProfileElementValue=false,readingProfileElementContext=false,
	 readingProfileElementCreator=false,readingProfileElementName=false;
	 
	 private Vector resLocations=null;
	 private Vector authors=null;
	 private Vector creators=null;
	 private Vector owners=null;
	 
	 private boolean readingProfileAttributes=false,readingProfileID=false,readingProfileCreator=false;
	 private boolean readingResourceAttributes=false,readingResourceID=false,readingResourceClass=false,readingResourceLocation=false,readingResourceAuthor=false,readingResourceCreator=false,readingResourceOwner=false;
	 

	 /**
	  * <p>Default c'tor which takes in a String representation of a resource profile and turns it into a {@link Profile} object.
	  * 
	  * @param profile String version of the Resource Profile. The string version conforms to the string generated by the <code>toXMLString</code> method in the {@link Profile} class.
	  */
	  public XMLProfileReader(String profile)
	  {
	  	ByteArrayInputStream prof = new ByteArrayInputStream(profile.getBytes());
	  	
	    try {
	      parse(new InputStreamReader(prof));
	    }
	    catch (final IOException e) {
	      System.out.println("IOException: " + e);
	      e.printStackTrace();
	    }
	    catch (final SAXException e) {
	      System.out.println("SAXException: " + e);
	      e.printStackTrace();
	    } 
	    catch (final Throwable e) {
	      System.out.println("Other Exception: " + e);
	      e.printStackTrace();
	    }
	  }	
	
	  /**
	   * <p>Returns the profile that was parsed by this XMLProfileReader.</p>
	   * 
	   * @return {@link Profile} which was parsed by this XMLProfileReader.
	   */
	  public Profile getProfile(){
	  	if(theProfiles != null){
	  		return (Profile)theProfiles.elementAt(0);
	  	}
	  	else return theProfile;
	  }
	  
	  /**
	   * <p>Returns a {@link Vector} of all profiles parsed by this XMLProfileReader.</p>
	   * 
	   * @return {@link Vector} of profiles parsed by this XMLProfileReader through its existance.
	   */
	  public Vector getProfiles(){
	  	return theProfiles;
	  }
	  
	  /**
	   * <p>Callback called at the start of the XML document.</p>
	   * 
	   * @return void.
	   */
	  public void startDocument() {
	    System.out.println("Start of Profile Document");

	  }

	  /**
	   * <p>Callback called at the end of the XML document.</p>
	   * 
	   * @return void.
	   */
	  public void endDocument() {
	    System.out.println("End of Profile Document");
	  }	

	  /**
	   * <p>Callback called whenever this parser encounters an XML elemnt.</p>
	   * 
	   * @param name The name of the XML element encountered.
	   * @param attributes 
	   */
	  public void startElement (String name, AttributeList attributes) {
	  	if(name.equals("profiles")){
	  		theProfiles = new Vector();
	  	}
	  	else if(name.equals("profile")){
		    theProfile = new Profile();	  		
	  	}
	  	else if(name.equals("profileAttributes")){
	  	   readingProfileAttributes=true;
	  	   theProfileAttributes = new ProfileAttributes();
	  	}
	  	else if(name.equals("profileID")){
	  	   if(readingProfileAttributes){
	  	   	//make sure that we are reading profile attributes here
	  	   	readingProfileID=true;
	  	   }
	  	}
	  	else if(name.equals("profileCreator")){
	  		if(readingProfileAttributes){
	  			readingProfileCreator=true;
	  		}
	  	}
	  	else if(name.equals("resourceAttributes")){
	  		readingResourceAttributes=true;
	  		theResourceAttributes = new ResourceAttributes();
	  	}
	  	else if(name.equals("resourceClass")){
	  		if(readingResourceAttributes){
	  			readingResourceClass = true;
	  		}
	  	}
	  	else if(name.equals("resourceID")){
	  		if(readingResourceAttributes){
	  			readingResourceID = true;
	  		}
	  	}	  	
	  	else if(name.equals("resourceLocation")){
	  		if(readingResourceAttributes){
	  			if(resLocations == null){resLocations = new Vector();}
	  			readingResourceLocation = true;
	  		}
	  	}	
	  	else if(name.equals("creator")){
	  		if(readingResourceAttributes){
	  			if(creators == null){creators = new Vector();}
	  			readingResourceCreator = true;
	  		}
	  		else if(readingProfileElement){
	  			readingProfileElementCreator=true;
	  		}
	  	}
	  	else if(name.equals("author")){
	  		if(readingResourceAttributes){
	  			if(authors == null){authors = new Vector();}
	  			readingResourceAuthor = true;
	  		}
	  	}
	  	else if(name.equals("owner")){
	  		if(readingResourceAttributes){
	  		if(owners == null){owners = new Vector();}
	  			readingResourceOwner = true;
	  		}
	  	}
	  	else if(name.equals("profileElement")){
	  		readingProfileElement=true;
	  		profElem = new ProfileElement();
	  	}
	  	else if(name.equals("context")){
	  		if(readingProfileElement){
	  			readingProfileElementContext=true;
	  		}
	  	}
	  	else if(name.equals("value")){
	  		if(readingProfileElement){
	  			readingProfileElementValue=true;
	  		}
	  	}
	  	else if(name.equals("title")){
	  		if(readingProfileElement){
	  			readingProfileElementTitle=true;
	  		}
	  	}
	  	else if(name.equals("name")){
	  		if(readingProfileElement){
	  			readingProfileElementName=true;
	  		}
	  	}
	  	
	  }

	  /**
	   * <p>Called when the reader reaches the end of an XML element tag.</p>
	   * 
	   * @param name The element name it reached the end tag for.
	   * @return void.
	   */
	  public void endElement (String name) {
	  	
	  	   if(name.equals("profiles")){
	  	   	 //don't need to do anything
	  	   }
	  	   else if(name.equals("profile")){
	  	   	theProfile.setProfileAttributes(theProfileAttributes);
	  	   	theProfile.setResourceAttributes(theResourceAttributes);
	  	   	theProfile.setProfileElements(profileElements);
	  	   	
	  	   	if(theProfiles != null){
	  	   		theProfiles.addElement(theProfile);
	  	   	}
	  	   }
	  	   else if(name.equals("profileAttributes")){
		  	   readingProfileAttributes=false;
		  	}
		  	else if(name.equals("profileID")){
		  	   if(readingProfileAttributes){
		  	   	readingProfileID=false;
		  	   }
		  	}
		  	else if(name.equals("profileCreator")){
		  		readingProfileCreator=false;
		  	}
		  	else if(name.equals("resourceAttributes")){
		  		readingResourceAttributes=false;
		  		theResourceAttributes.setResourceLocations(resLocations);
		  		theResourceAttributes.setOwners(owners);
		  		theResourceAttributes.setCreators(creators);
		  		theResourceAttributes.setAuthors(authors);
		  	}
		  	else if(name.equals("resourceClass")){
		  		if(readingResourceAttributes){
		  			readingResourceClass = false;
		  		}
		  	}
		  	else if(name.equals("resourceID")){
		  		if(readingResourceAttributes){
		  			readingResourceID = false;
		  		}
		  	}
		  	else if(name.equals("resourceLocation")){
		  		if(readingResourceAttributes){
		  			readingResourceLocation = false;
		  		}
		  	}	
		  	else if(name.equals("creator")){
		  		if(readingResourceAttributes){
		  			readingResourceCreator = false;
		  		}
		  		else if(readingProfileElement){
		  			readingProfileElementCreator=false;
		  		}
		  	}
		  	else if(name.equals("author")){
		  		if(readingResourceAttributes){
		  			readingResourceAuthor = false;
		  		}
		  	}
		  	else if(name.equals("owner")){
		  		if(readingResourceAttributes){
		  			readingResourceOwner = false;
		  		}
		  	}
		  	else if(name.equals("profileElement")){
		  		readingProfileElement=false;
		  		if(profileElements == null){profileElements = new Vector();}
		  		profileElements.addElement(profElem);
		  	}
		  	else if(name.equals("context")){
		  		if(readingProfileElement){
		  			readingProfileElementContext=false;
		  		}
		  	}
		  	else if(name.equals("value")){
		  		if(readingProfileElement){
		  			readingProfileElementValue=false;
		  		}
		  	}
		  	else if(name.equals("title")){
		  		if(readingProfileElement){
		  			readingProfileElementTitle=false;
		  		}
		  	}
		  	else if(name.equals("name")){
		  		if(readingProfileElement){
		  			readingProfileElementName=false;
		  		}
		  	}
	  }

	  /**
	   * <p>Funcion called when reader reaches inside text for a particular xml tag.</p>
	   * 
	   * @param ch The character array of text to read.
	   * @param start The starting offset in the array
	   * @param length The length of the character array
	   * 
	   * @return void.
	   */
	  public void characters (char ch[], int start, int length) {
	  	String xmlData = new String(ch,start,length);
	  	System.err.println("XML DATA IS "+xmlData);
	  	
	  	if(readingProfileAttributes && readingProfileID){
	  		theProfileAttributes.setProfileID(xmlData);
	  	}
	  	else if(readingProfileAttributes && readingProfileCreator){
	  		theProfileAttributes.setProfileCreator(xmlData);
	  	}
	  	else if(readingResourceAttributes && readingResourceClass){
	  		theResourceAttributes.setResourceClass(xmlData);
	  	}
	  	else if(readingResourceAttributes && readingResourceID){
	  		theResourceAttributes.setResourceID(xmlData);
	  	}
	  	else if(readingResourceAttributes && readingResourceLocation){
	  		resLocations.addElement(xmlData);
	  	}	
	  	else if(readingResourceAttributes && readingResourceCreator){
	  		creators.addElement(xmlData);
	  	}
	  	else if(readingResourceAttributes && readingResourceOwner){
	  		owners.addElement(xmlData);
	  	}
	  	else if(readingResourceAttributes && readingResourceAuthor){
	  		authors.addElement(xmlData);
	  	}
	  	else if(readingProfileElement && readingProfileElementName){
	  		profElem.setName(profElem.getName()+xmlData); //not sure why this is needed yet..
	  	}
	  	else if(readingProfileElement && readingProfileElementTitle){
	  		profElem.setTitle(xmlData);
	  	}
	  	else if(readingProfileElement && readingProfileElementCreator){
	  		profElem.setCreator(xmlData);
	  	}
	  	else if(readingProfileElement && readingProfileElementContext){
	  		profElem.setContext(xmlData);
	  	}
	  	else if(readingProfileElement && readingProfileElementValue){
	  		profElem.setValue(xmlData);
	  	}
	  	
	  }

	  /**
	   * <p>Method called when a fatal error occurs.</p>
	   * 
	   * @param e The SAXParseException that this method caught.
	   * @return void.
	   */
	  public void fatalError (SAXParseException e) throws SAXException {
	    System.out.println("Error: " + e);
	    throw e;
	  }
	 
	  /**
	   * <p>Method reads a profile xml file, attemps to parse it, and then prints out the result of a 
	   * <code>toXMLString</code> call on the instantianted java profile object created from parsing.
	   * 
	   * </p>
	   * 
	   * @param args The important param is <code>--profileLoc</code>. Pass in a String representing the path to the profile file.
	   * @return void.
	   */
		public static void main (final String[] args) {
			String usage="java glide.util.XMLProfileReader --profileLoc <path_to_profile>\n";
			
			String fileString=null;
			
			for(int i=0; i < args.length; i++){
				if(args[i].equals("--profileLoc")){
					fileString=args[++i];
				}
			}
			
			if(fileString == null){
				System.err.println(usage);
				System.exit(1);
			}
			
			File profileFile = new File(fileString);
			BufferedReader profReader = null;
			
			try{
				profReader = new BufferedReader(new FileReader(profileFile));
			}
			catch(FileNotFoundException fne){
			  System.out.println("Error, cannot find file "+profileFile);
			  fne.printStackTrace();
			  System.out.println(fne.getMessage());
			  return;
			}
			
			
			char [] profBuffer = new char[512];
			StringBuffer sb = new StringBuffer();
			
			try{
				while(profReader.read(profBuffer,0,512) != -1){
					sb.append(profBuffer);
					profBuffer = new char[512];
				} //read everything into profBuffer
			}
			catch(IOException ioe){
				System.out.println("Error reading from profile File!");
				ioe.printStackTrace();
				System.out.println(ioe.getMessage());
			    //try to keep reading
			}
			String pXml = new String(sb.toString());
			System.err.println("Read in profile...");
			System.err.println(pXml);

			
			XMLProfileReader xpr = new XMLProfileReader(pXml);
			Profile p1 = xpr.getProfile();
			System.out.println(p1.toXMLString());
		}
	
}